UOPCODE( 0x00, NOP, "nop", TY_AM32 )
UOPCODE( 0x01, UNREACH, "unreach", TY_AM32 )
UOPCODE( 0x02, RETURN, "return", TY_AM32 )
UOPCODE( 0x03, CALL, "call", TY_AM32_OFS )
UOPCODE( 0x04, JMP, "jmp", TY_AM32_OFS )
UOPCODE( 0x05, CALL_INDIRECT, "call_indirect", TY_AM32_R )
UOPCODE( 0x06, JMP_INDIRECT, "jmp_indirect", TY_AM32_R )
UOPCODE( 0x07, MEMORYSIZE, "memorysize", TY_AM32_R )
UOPCODE( 0x08, MEMORYGROW, "memorygrow", TY_AM32_R_R )
UOPCODE( 0x09, ADD_RI, "add", TY_AM32_R_IMM )
UOPCODE( 0x0a, JEZ, "jez", TY_AM32_R_OFS )
UOPCODE( 0x0b, JNZ, "jnz", TY_AM32_R_OFS )
UOPCODE( 0x0c, JLZ, "jlz", TY_AM32_R_OFS )
UOPCODE( 0x0d, JLEZ, "jlez", TY_AM32_R_OFS )
UOPCODE( 0x0e, JGZ, "jgz", TY_AM32_R_OFS )
UOPCODE( 0x0f, JGEZ, "jgez", TY_AM32_R_OFS )
UOPCODE( 0x10, LLDA, "llda", TY_AM32_R_OFS )
UOPCODE( 0x11, GLDA, "glda", TY_AM32_R_OFS )
UOPCODE( 0x12, MOV, "mov", TY_AM32_R_R )
UOPCODE( 0x13, ADD_RR, "add", TY_AM32_R_R )
UOPCODE( 0x14, CONST, "const", TY_AM32_R_IMM )
UOPCODE( 0x15, ADDS_I, "add", TY_AM32S_R_R_IMM )
UOPCODE( 0x16, JEQ, "jeq", TY_AM32S_R_R_OFS )
UOPCODE( 0x17, JNE, "jne", TY_AM32S_R_R_OFS )
UOPCODE( 0x18, JLT, "jlt", TY_AM32S_R_R_OFS )
UOPCODE( 0x19, JLE, "jle", TY_AM32S_R_R_OFS )
UOPCODE( 0x1a, JGT, "jgt", TY_AM32S_R_R_OFS )
UOPCODE( 0x1b, JGE, "jge", TY_AM32S_R_R_OFS )
UOPCODE( 0x1c, JLT_U, "jlt_u", TY_AM32S_R_R_OFS )
UOPCODE( 0x1d, JLE_U, "jle_u", TY_AM32S_R_R_OFS )
UOPCODE( 0x1e, JGT_U, "jgt_u", TY_AM32S_R_R_OFS )
UOPCODE( 0x1f, JGE_U, "jge_u", TY_AM32S_R_R_OFS )
UOPCODE( 0x20, LOAD_RROFS, "load", TY_AM32S_R_R_IMM )
UOPCODE( 0x21, LOAD8_RROFS, "load8", TY_AM32S_R_R_IMM )
UOPCODE( 0x22, LOAD8_U_RROFS, "load8_u", TY_AM32S_R_R_IMM )
UOPCODE( 0x23, LOAD16_RROFS, "load16", TY_AM32S_R_R_IMM )
UOPCODE( 0x24, LOAD16_U_RROFS, "load16_u", TY_AM32S_R_R_IMM )
UOPCODE( 0x25, LOAD32_RROFS, "load32", TY_AM32S_R_R_IMM )
UOPCODE( 0x26, LOAD32_U_RROFS, "load32_u", TY_AM32S_R_R_IMM )
UOPCODE( 0x27, STORE, "store", TY_AM32S_R_R_IMM )
UOPCODE( 0x28, STORE8, "store8", TY_AM32S_R_R_IMM )
UOPCODE( 0x29, STORE16, "store16", TY_AM32S_R_R_IMM )
UOPCODE( 0x2a, STORE32, "store32", TY_AM32S_R_R_IMM )
UOPCODE( 0x2b, LLOAD_ROFS, "lload", TY_AM32_R_IMM )
UOPCODE( 0x2c, LLOAD8_ROFS, "lload8", TY_AM32_R_IMM )
UOPCODE( 0x2d, LLOAD8_U_ROFS, "lload8_u", TY_AM32_R_IMM )
UOPCODE( 0x2e, LLOAD16_ROFS, "lload16", TY_AM32_R_IMM )
UOPCODE( 0x2f, LLOAD16_U_ROFS, "lload16_u", TY_AM32_R_IMM )
UOPCODE( 0x30, LLOAD32_ROFS, "lload32", TY_AM32_R_IMM )
UOPCODE( 0x31, LLOAD32_U_ROFS, "lload32_u", TY_AM32_R_IMM )
UOPCODE( 0x32, LSTORE, "lstore", TY_AM32_R_IMM )
UOPCODE( 0x33, LSTORE8, "lstore8", TY_AM32_R_IMM )
UOPCODE( 0x34, LSTORE16, "lstore16", TY_AM32_R_IMM )
UOPCODE( 0x35, LSTORE32, "lstore32", TY_AM32_R_IMM )
UOPCODE( 0x36, ADDS, "add", TY_AM32S_R_R_R )
UOPCODE( 0x37, SUBS, "sub", TY_AM32S_R_R_R )
UOPCODE( 0x38, ROTL, "rotl", TY_AM32S_R_R_R )
UOPCODE( 0x39, ROTR, "rotr", TY_AM32S_R_R_R )
UOPCODE( 0x3a, CONV_I32, "conv_i32", TY_AM32_R_R )
UOPCODE( 0x3b, CONV_I32_U, "conv_i32_u", TY_AM32_R_R )
UOPCODE( 0x3c, CONV_I64, "conv_i64", TY_AM32_R_R )
UOPCODE( 0x3d, CONV_F32, "conv_f32", TY_AM32_R_R )
UOPCODE( 0x3e, CONV_F64, "conv_f64", TY_AM32_R_R )
UOPCODE( 0x3f, EQZ, "eqz", TY_AM32_R_R )
UOPCODE( 0x40, CEIL, "ceil", TY_AM32_R_R )
UOPCODE( 0x41, FLOOR, "floor", TY_AM32_R_R )
UOPCODE( 0x42, SQRT, "sqrt", TY_AM32_R_R )
UOPCODE( 0x43, NEG, "neg", TY_AM32_R_R )
UOPCODE( 0x44, REINTERPRET_F32, "reIntr_f32", TY_AM32_R_R )
UOPCODE( 0x45, REINTERPRET_F64, "reIntr_f64", TY_AM32_R_R )
UOPCODE( 0x46, REINTERPRET_I32, "reIntr_i32", TY_AM32_R_R )
UOPCODE( 0x47, REINTERPRET_I64, "reIntr_i64", TY_AM32_R_R )
UOPCODE( 0x48, BREAK, "break", TY_AM32 )
UOPCODE( 0x49, UNUSED14, "-", TY_AM32 )
UOPCODE( 0x4a, UNUSED15, "-", TY_AM32 )
UOPCODE( 0x4b, UNUSED16, "-", TY_AM32 )
UOPCODE( 0x4c, UNUSED17, "-", TY_AM32 )
UOPCODE( 0x4d, UNUSED18, "-", TY_AM32 )
UOPCODE( 0x4e, UNUSED19, "-", TY_AM32 )
UOPCODE( 0x4f, UNUSED20, "-", TY_AM32 )
UOPCODE( 0x50, UNUSED21, "-", TY_AM32 )
UOPCODE( 0x51, UNUSED22, "-", TY_AM32 )
UOPCODE( 0x52, UNUSED23, "-", TY_AM32 )
UOPCODE( 0x53, UNUSED24, "-", TY_AM32 )
UOPCODE( 0x54, UNUSED25, "-", TY_AM32 )
UOPCODE( 0x55, UNUSED26, "-", TY_AM32 )
UOPCODE( 0x56, UNUSED27, "-", TY_AM32 )
UOPCODE( 0x57, UNUSED28, "-", TY_AM32 )
UOPCODE( 0x58, UNUSED29, "-", TY_AM32 )
UOPCODE( 0x59, UNUSED30, "-", TY_AM32 )
UOPCODE( 0x5a, UNUSED31, "-", TY_AM32 )
UOPCODE( 0x5b, UNUSED32, "-", TY_AM32 )
UOPCODE( 0x5c, UNUSED33, "-", TY_AM32 )
UOPCODE( 0x5d, UNUSED34, "-", TY_AM32 )
UOPCODE( 0x5e, UNUSED35, "-", TY_AM32 )
UOPCODE( 0x5f, UNUSED36, "-", TY_AM32 )
UOPCODE( 0x60, UNUSED37, "-", TY_AM32 )
UOPCODE( 0x61, UNUSED38, "-", TY_AM32 )
UOPCODE( 0x62, UNUSED39, "-", TY_AM32 )
UOPCODE( 0x63, UNUSED40, "-", TY_AM32 )
UOPCODE( 0x64, UNUSED41, "-", TY_AM32 )
UOPCODE( 0x65, UNUSED42, "-", TY_AM32 )
UOPCODE( 0x66, UNUSED43, "-", TY_AM32 )
UOPCODE( 0x67, UNUSED44, "-", TY_AM32 )
UOPCODE( 0x68, UNUSED45, "-", TY_AM32 )
UOPCODE( 0x69, UNUSED46, "-", TY_AM32 )
UOPCODE( 0x6a, UNUSED47, "-", TY_AM32 )
UOPCODE( 0x6b, UNUSED48, "-", TY_AM32 )
UOPCODE( 0x6c, UNUSED49, "-", TY_AM32 )
UOPCODE( 0x6d, UNUSED50, "-", TY_AM32 )
UOPCODE( 0x6e, UNUSED51, "-", TY_AM32 )
UOPCODE( 0x6f, UNUSED52, "-", TY_AM32 )
UOPCODE( 0x70, UNUSED53, "-", TY_AM32 )
UOPCODE( 0x71, UNUSED54, "-", TY_AM32 )
UOPCODE( 0x72, UNUSED55, "-", TY_AM32 )
UOPCODE( 0x73, UNUSED56, "-", TY_AM32 )
UOPCODE( 0x74, UNUSED57, "-", TY_AM32 )
UOPCODE( 0x75, UNUSED58, "-", TY_AM32 )
UOPCODE( 0x76, UNUSED59, "-", TY_AM32 )
UOPCODE( 0x77, UNUSED60, "-", TY_AM32 )
UOPCODE( 0x78, UNUSED61, "-", TY_AM32 )
UOPCODE( 0x79, UNUSED62, "-", TY_AM32 )
UOPCODE( 0x7a, UNUSED63, "-", TY_AM32 )
UOPCODE( 0x7b, UNUSED64, "-", TY_AM32 )
UOPCODE( 0x7c, UNUSED65, "-", TY_AM32 )
UOPCODE( 0x7d, UNUSED66, "-", TY_AM32 )
UOPCODE( 0x7e, UNUSED67, "-", TY_AM32 )
UOPCODE( 0x7f, UNUSED68, "-", TY_AM32 )
UOPCODE( 0x80, CONST_L, "const_l", TY_AM64_R_IMM )
UOPCODE( 0x81, CONST_L_HIGH, "const_l_high", TY_AM64_R_IMM )
UOPCODE( 0x82, CTZ, "ctz", TY_AM64_R_OFS )
UOPCODE( 0x83, POPCNT, "popcnt", TY_AM64_R_OFS )
UOPCODE( 0x84, ADD_RRI, "add", TY_AM64_R_R_IMM )
UOPCODE( 0x85, JEQ_L, "jeq", TY_AM64_R_R_OFS )
UOPCODE( 0x86, JNE_L, "jne", TY_AM64_R_R_OFS )
UOPCODE( 0x87, JLT_L, "jlt", TY_AM64_R_R_OFS )
UOPCODE( 0x88, JLE_L, "jle", TY_AM64_R_R_OFS )
UOPCODE( 0x89, JGT_L, "jgt", TY_AM64_R_R_OFS )
UOPCODE( 0x8a, JGE_L, "jge", TY_AM64_R_R_OFS )
UOPCODE( 0x8b, JLT_U_L, "jlt_u", TY_AM64_R_R_OFS )
UOPCODE( 0x8c, JLE_U_L, "jle_u", TY_AM64_R_R_OFS )
UOPCODE( 0x8d, JGT_U_L, "jgt_u", TY_AM64_R_R_OFS )
UOPCODE( 0x8e, JGE_U_L, "jge_u", TY_AM64_R_R_OFS )
UOPCODE( 0x8f, LOAD_RROFS_L, "load", TY_AM64_R_R_IMM )
UOPCODE( 0x90, LOAD8_RROFS_L, "load8", TY_AM64_R_R_IMM )
UOPCODE( 0x91, LOAD8_U_RROFS_L, "load8_u", TY_AM64_R_R_IMM )
UOPCODE( 0x92, LOAD16_RROFS_L, "load16", TY_AM64_R_R_IMM )
UOPCODE( 0x93, LOAD16_U_RROFS_L, "load16_u", TY_AM64_R_R_IMM )
UOPCODE( 0x94, LOAD32_RROFS_L, "load32", TY_AM64_R_R_IMM )
UOPCODE( 0x95, LOAD32_U_RROFS_L, "load32_u", TY_AM64_R_R_IMM )
UOPCODE( 0x96, STORE_L, "store", TY_AM64_R_R_IMM )
UOPCODE( 0x97, STORE8_L, "store8", TY_AM64_R_R_IMM )
UOPCODE( 0x98, STORE16_L, "store16", TY_AM64_R_R_IMM )
UOPCODE( 0x99, STORE32_L, "store32", TY_AM64_R_R_IMM )
UOPCODE( 0x9a, SELECT, "select", TY_AM64_R_R_OFS )
UOPCODE( 0x9b, LLOAD_ROFS_L, "lload", TY_AM64_R_IMM )
UOPCODE( 0x9c, LLOAD8_ROFS_L, "lload8", TY_AM64_R_IMM )
UOPCODE( 0x9d, LLOAD8_U_ROFS_L, "lload8_u", TY_AM64_R_IMM )
UOPCODE( 0x9e, LLOAD16_ROFS_L, "lload16", TY_AM64_R_IMM )
UOPCODE( 0x9f, LLOAD16_U_ROFS_L, "lload16_u", TY_AM64_R_IMM )
UOPCODE( 0xa0, LLOAD32_ROFS_L, "lload32", TY_AM64_R_IMM )
UOPCODE( 0xa1, LLOAD32_U_ROFS_L, "lload32_u", TY_AM64_R_IMM )
UOPCODE( 0xa2, LSTORE_L, "lstore", TY_AM64_R_IMM )
UOPCODE( 0xa3, LSTORE8_L, "lstore8", TY_AM64_R_IMM )
UOPCODE( 0xa4, LSTORE16_L, "lstore16", TY_AM64_R_IMM )
UOPCODE( 0xa5, LSTORE32_L, "lstore32", TY_AM64_R_IMM )
UOPCODE( 0xa6, EQ, "eq", TY_AM64_R_R_R )
UOPCODE( 0xa7, NE, "ne", TY_AM64_R_R_R )
UOPCODE( 0xa8, LT, "lt", TY_AM64_R_R_R )
UOPCODE( 0xa9, LT_U, "lt_u", TY_AM64_R_R_R )
UOPCODE( 0xaa, GT, "gt", TY_AM64_R_R_R )
UOPCODE( 0xab, GT_U, "gt_u", TY_AM64_R_R_R )
UOPCODE( 0xac, LE, "le", TY_AM64_R_R_R )
UOPCODE( 0xad, LE_U, "le_u", TY_AM64_R_R_R )
UOPCODE( 0xae, GE, "ge", TY_AM64_R_R_R )
UOPCODE( 0xaf, GE_U, "ge_u", TY_AM64_R_R_R )
UOPCODE( 0xb0, ADD, "add", TY_AM64_R_R_R )
UOPCODE( 0xb1, SUB, "sub", TY_AM64_R_R_R )
UOPCODE( 0xb2, MUL, "mul", TY_AM64_R_R_R )
UOPCODE( 0xb3, DIV, "div", TY_AM64_R_R_R )
UOPCODE( 0xb4, DIV_U, "div_u", TY_AM64_R_R_R )
UOPCODE( 0xb5, REM, "rem", TY_AM64_R_R_R )
UOPCODE( 0xb6, REM_U, "rem_u", TY_AM64_R_R_R )
UOPCODE( 0xb7, AND, "and", TY_AM64_R_R_R )
UOPCODE( 0xb8, OR, "or", TY_AM64_R_R_R )
UOPCODE( 0xb9, XOR, "xor", TY_AM64_R_R_R )
UOPCODE( 0xba, SHL, "shl", TY_AM64_R_R_R )
UOPCODE( 0xbb, SHR, "shr", TY_AM64_R_R_R )
UOPCODE( 0xbc, SHR_U, "shr_u", TY_AM64_R_R_R )
UOPCODE( 0xbd, MIN, "min", TY_AM64_R_R_R )
UOPCODE( 0xb1e, MAX, "max", TY_AM64_R_R_R )
UOPCODE( 0xbf, LLDA_L, "llda", TY_AM64_R_OFS )
UOPCODE( 0xc0, BUILTIN, "builtin", TY_AM64_R_R_IMM )
UOPCODE( 0xc1, GGET, "globalget", TY_AM64_R_OFS )
UOPCODE( 0xc2, GSET, "globalset", TY_AM64_R_OFS )
// 0xc3: unused
// 0xc4: unused
// 0xc5: unused
// 0xc6: unused
// 0xc7: unused
// 0xc8: unused
// 0xc9: unused
// 0xca: unused
// 0xcb: unused
// 0xcc: unused
// 0xcd: unused
// 0xce: unused
// 0xcf: unused
// 0xd0: unused
// 0xd1: unused
// 0xd2: unused
// 0xd3: unused
// 0xd4: unused
// 0xd5: unused
// 0xd6: unused
// 0xd7: unused
// 0xd8: unused
// 0xd9: unused
// 0xda: unused
// 0xdb: unused
// 0xdc: unused
// 0xdd: unused
// 0xde: unused
// 0xdf: unused
// 0xe0: unused
// 0xe1: unused
// 0xe2: unused
// 0xe3: unused
// 0xe4: unused
// 0xe5: unused
// 0xe6: unused
// 0xe7: unused
// 0xe8: unused
// 0xe9: unused
// 0xea: unused
// 0xeb: unused
// 0xec: unused
// 0xed: unused
// 0xee: unused
// 0xef: unused
// 0xf0: unused
// 0xf1: unused
// 0xf2: unused
// 0xf3: unused
// 0xf4: unused
// 0xf5: unused
// 0xf6: unused
// 0xf7: unused
// 0xf8: unused
// 0xf9: unused
// 0xfa: unused
// 0xfb: unused
// 0xfc: unused
// 0xfd: unused
// 0xfe: unused
// 0xff: unused
