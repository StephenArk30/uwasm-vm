U_BUILTIN(UBT_NOP,               0x00, Nop,                  0x00, "builtin.nop")
U_BUILTIN(UBT_I64EXTEND32S,      0x01, I64ExtendI32S,        0xac, "builtin.i64extend32s")
U_BUILTIN(UBT_I64EXTEND32U,      0x02, I64ExtendI32U,        0xad, "builtin.i64extend32u")
U_BUILTIN(UBT_I32WRAPI64,        0x03, I32WrapI64,           0xa7, "builtin.i32.wrap_i64")
U_BUILTIN(UBT_F64CVTI32S,        0x04, F64ConvertI32S,       0xb7, "builtin.f64.convert_i32_s")
U_BUILTIN(UBT_F64CVTI32U,        0x05, F64ConvertI32U,       0xb8, "builtin.f64.convert_i32_u")
U_BUILTIN(UBT_I32TRUNCF64U,      0x06, I32TruncF64U,         0xab, "builtin.i32.trunc_f64_u")
U_BUILTIN(UBT_I64REINTEPRETF64,  0x07, I64ReinterpretF64,    0xbd, "builtin.i64.reinterpret.f64")
U_BUILTIN(UBT_I32REINTEPRETF32,  0x08, I32ReinterpretF32,    0xbc, "builtin.i32.reinterpret.f32")
U_BUILTIN(UBT_F64REINTEPRETI64,  0x09, F64ReinterpretI64,    0xbf, "builtin.f64.reinterpret.i64")
U_BUILTIN(UBT_F32REINTEPRETI32,  0x0a, F32ReinterpretI32,    0xbe, "builtin.f32.reinterpret.i32")
U_BUILTIN(UBT_F64ABS,            0x0b, F64Abs,               0x99, "builtin.f64.abs")
U_BUILTIN(UBT_I32TRUNCF64S,      0x0b, I32TruncF64S,         0xaa, "builtin.i32.trunc.f64.s")
U_BUILTIN(UBT_UNKNOWN,           0x7f, Unreachable,          0x01, "builtin.unreach")

/*
WASM_OP(I32,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x67, I32Clz,             "i32.clz", "clz")
WASM_OP(I32,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x68, I32Ctz,             "i32.ctz", "ctz")
WASM_OP(I32,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x69, I32Popcnt,          "i32.popcnt", "popcnt")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x6a, I32Add,             "i32.add", "+")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x6b, I32Sub,             "i32.sub", "-")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x6c, I32Mul,             "i32.mul", "*")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x6d, I32DivS,            "i32.div_s", "/")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x6e, I32DivU,            "i32.div_u", "/")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x6f, I32RemS,            "i32.rem_s", "%")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x70, I32RemU,            "i32.rem_u", "%")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x71, I32And,             "i32.and", "&")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x72, I32Or,              "i32.or", "|")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x73, I32Xor,             "i32.xor", "^")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x74, I32Shl,             "i32.shl", "<<")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x75, I32ShrS,            "i32.shr_s", ">>")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x76, I32ShrU,            "i32.shr_u", ">>")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x77, I32Rotl,            "i32.rotl", "<<")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x78, I32Rotr,            "i32.rotr", ">>")
WASM_OP(I64,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x79, I64Clz,             "i64.clz", "clz")
WASM_OP(I64,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x7a, I64Ctz,             "i64.ctz", "ctz")
WASM_OP(I64,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x7b, I64Popcnt,          "i64.popcnt", "popcnt")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x7c, I64Add,             "i64.add", "+")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x7d, I64Sub,             "i64.sub", "-")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x7e, I64Mul,             "i64.mul", "*")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x7f, I64DivS,            "i64.div_s", "/")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x80, I64DivU,            "i64.div_u", "/")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x81, I64RemS,            "i64.rem_s", "%")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x82, I64RemU,            "i64.rem_u", "%")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x83, I64And,             "i64.and", "&")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x84, I64Or,              "i64.or", "|")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x85, I64Xor,             "i64.xor", "^")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x86, I64Shl,             "i64.shl", "<<")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x87, I64ShrS,            "i64.shr_s", ">>")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x88, I64ShrU,            "i64.shr_u", ">>")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x89, I64Rotl,            "i64.rotl", "<<")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x8a, I64Rotr,            "i64.rotr", ">>")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x8b, F32Abs,             "f32.abs", "abs")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x8c, F32Neg,             "f32.neg", "-")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x8d, F32Ceil,            "f32.ceil", "ceil")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x8e, F32Floor,           "f32.floor", "floor")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x8f, F32Trunc,           "f32.trunc", "trunc")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x90, F32Nearest,         "f32.nearest", "nearest")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x91, F32Sqrt,            "f32.sqrt", "sqrt")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x92, F32Add,             "f32.add", "+")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x93, F32Sub,             "f32.sub", "-")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x94, F32Mul,             "f32.mul", "*")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x95, F32Div,             "f32.div", "/")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x96, F32Min,             "f32.min", "min")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x97, F32Max,             "f32.max", "max")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x98, F32Copysign,        "f32.copysign", "copysign")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x99, F64Abs,             "f64.abs", "abs")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x9a, F64Neg,             "f64.neg", "-")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x9b, F64Ceil,            "f64.ceil", "ceil")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x9c, F64Floor,           "f64.floor", "floor")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x9d, F64Trunc,           "f64.trunc", "trunc")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x9e, F64Nearest,         "f64.nearest", "nearest")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x9f, F64Sqrt,            "f64.sqrt", "sqrt")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa0, F64Add,             "f64.add", "+")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa1, F64Sub,             "f64.sub", "-")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa2, F64Mul,             "f64.mul", "*")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa3, F64Div,             "f64.div", "/")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa4, F64Min,             "f64.min", "min")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa5, F64Max,             "f64.max", "max")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa6, F64Copysign,        "f64.copysign", "copysign")
WASM_OP(I32,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa7, I32WrapI64,         "i32.wrap_i64", "")
WASM_OP(I32,  F32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa8, I32TruncF32S,       "i32.trunc_f32_s", "")
WASM_OP(I32,  F32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa9, I32TruncF32U,       "i32.trunc_f32_u", "")
WASM_OP(I32,  F64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xaa, I32TruncF64S,       "i32.trunc_f64_s", "")
WASM_OP(I32,  F64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xab, I32TruncF64U,       "i32.trunc_f64_u", "")
WASM_OP(I64,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xac, I64ExtendI32S,      "i64.extend_i32_s", "")
WASM_OP(I64,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xad, I64ExtendI32U,      "i64.extend_i32_u", "")
WASM_OP(I64,  F32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xae, I64TruncF32S,       "i64.trunc_f32_s", "")
WASM_OP(I64,  F32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xaf, I64TruncF32U,       "i64.trunc_f32_u", "")
WASM_OP(I64,  F64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb0, I64TruncF64S,       "i64.trunc_f64_s", "")
WASM_OP(I64,  F64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb1, I64TruncF64U,       "i64.trunc_f64_u", "")
WASM_OP(F32,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb2, F32ConvertI32S,     "f32.convert_i32_s", "")
WASM_OP(F32,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb3, F32ConvertI32U,     "f32.convert_i32_u", "")
WASM_OP(F32,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb4, F32ConvertI64S,     "f32.convert_i64_s", "")
WASM_OP(F32,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb5, F32ConvertI64U,     "f32.convert_i64_u", "")
WASM_OP(F32,  F64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb6, F32DemoteF64,       "f32.demote_f64", "")
WASM_OP(F64,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb7, F64ConvertI32S,     "f64.convert_i32_s", "")
WASM_OP(F64,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb8, F64ConvertI32U,     "f64.convert_i32_u", "")
WASM_OP(F64,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb9, F64ConvertI64S,     "f64.convert_i64_s", "")
WASM_OP(F64,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xba, F64ConvertI64U,     "f64.convert_i64_u", "")
WASM_OP(F64,  F32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xbb, F64PromoteF32,      "f64.promote_f32", "")
WASM_OP(I32,  F32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xbc, I32ReinterpretF32,  "i32.reinterpret_f32", "")
WASM_OP(I64,  F64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xbd, I64ReinterpretF64,  "i64.reinterpret_f64", "")
WASM_OP(F32,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xbe, F32ReinterpretI32,  "f32.reinterpret_i32", "")
WASM_OP(F64,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xbf, F64ReinterpretI64,  "f64.reinterpret_i64", "")
*/