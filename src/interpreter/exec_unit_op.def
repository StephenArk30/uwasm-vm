// generated by convert2def.py
// >>>>>>>> manual case begin >>>>>>>>>>
case BREAK_AM32_L:
case BREAK_AM321_L:
case BREAK_AM322_L:
case BREAK_AM323_L:
{
goto exec_end;
break;
}
case CALL_AM32_OFS_L:
case CALL_AM32_OFS1_L:
case CALL_AM32_OFS2_L:
case CALL_AM32_OFS3_L:
Call_am32_ofs(inst);
continue;
case CALL_INDIRECT_AM32_R_L:
case CALL_INDIRECT_AM32_R1_L:
case CALL_INDIRECT_AM32_R2_L:
case CALL_INDIRECT_AM32_R3_L:
Call_indirect_am32_r(inst);
continue;
case JMP_AM32_OFS_L:
case JMP_AM32_OFS1_L:
case JMP_AM32_OFS2_L:
case JMP_AM32_OFS3_L:
Jmp_am32_ofs(inst);
continue;
case JMP_INDIRECT_AM32_R_L:
case JMP_INDIRECT_AM32_R1_L:
case JMP_INDIRECT_AM32_R2_L:
case JMP_INDIRECT_AM32_R3_L:
Jmp_indirect_am32_r(inst);
continue;
case JEZ_I32_AM32_R_OFS_L:
Jez_i32_am32_r_ofs(inst);
continue;
case JEZ_I64_AM32_R_OFS_L:
Jez_i64_am32_r_ofs(inst);
continue;
case JEZ_F32_AM32_R_OFS_L:
Jez_f32_am32_r_ofs(inst);
continue;
case JEZ_F64_AM32_R_OFS_L:
Jez_f64_am32_r_ofs(inst);
continue;
case JNZ_I32_AM32_R_OFS_L:
Jnz_i32_am32_r_ofs(inst);
continue;
case JNZ_I64_AM32_R_OFS_L:
Jnz_i64_am32_r_ofs(inst);
continue;
case JNZ_F32_AM32_R_OFS_L:
Jnz_f32_am32_r_ofs(inst);
continue;
case JNZ_F64_AM32_R_OFS_L:
Jnz_f64_am32_r_ofs(inst);
continue;
case JLZ_I32_AM32_R_OFS_L:
Jlz_i32_am32_r_ofs(inst);
continue;
case JLZ_I64_AM32_R_OFS_L:
Jlz_i64_am32_r_ofs(inst);
continue;
case JLZ_F32_AM32_R_OFS_L:
Jlz_f32_am32_r_ofs(inst);
continue;
case JLZ_F64_AM32_R_OFS_L:
Jlz_f64_am32_r_ofs(inst);
continue;
case JLEZ_I32_AM32_R_OFS_L:
Jlez_i32_am32_r_ofs(inst);
continue;
case JLEZ_I64_AM32_R_OFS_L:
Jlez_i64_am32_r_ofs(inst);
continue;
case JLEZ_F32_AM32_R_OFS_L:
Jlez_f32_am32_r_ofs(inst);
continue;
case JLEZ_F64_AM32_R_OFS_L:
Jlez_f64_am32_r_ofs(inst);
continue;
case JGZ_I32_AM32_R_OFS_L:
Jgz_i32_am32_r_ofs(inst);
continue;
case JGZ_I64_AM32_R_OFS_L:
Jgz_i64_am32_r_ofs(inst);
continue;
case JGZ_F32_AM32_R_OFS_L:
Jgz_f32_am32_r_ofs(inst);
continue;
case JGZ_F64_AM32_R_OFS_L:
Jgz_f64_am32_r_ofs(inst);
continue;
case JGEZ_I32_AM32_R_OFS_L:
Jgez_i32_am32_r_ofs(inst);
continue;
case JGEZ_I64_AM32_R_OFS_L:
Jgez_i64_am32_r_ofs(inst);
continue;
case JGEZ_F32_AM32_R_OFS_L:
Jgez_f32_am32_r_ofs(inst);
continue;
case JGEZ_F64_AM32_R_OFS_L:
Jgez_f64_am32_r_ofs(inst);
continue;
case JEQ_I32_AM32S_R_R_OFS_L:
Jeq_i32_am32s_r_r_ofs(inst);
continue;
case JEQ_I64_AM32S_R_R_OFS_L:
Jeq_i64_am32s_r_r_ofs(inst);
continue;
case JEQ_F32_AM32S_R_R_OFS_L:
Jeq_f32_am32s_r_r_ofs(inst);
continue;
case JEQ_F64_AM32S_R_R_OFS_L:
Jeq_f64_am32s_r_r_ofs(inst);
continue;
case JNE_I32_AM32S_R_R_OFS_L:
Jne_i32_am32s_r_r_ofs(inst);
continue;
case JNE_I64_AM32S_R_R_OFS_L:
Jne_i64_am32s_r_r_ofs(inst);
continue;
case JNE_F32_AM32S_R_R_OFS_L:
Jne_f32_am32s_r_r_ofs(inst);
continue;
case JNE_F64_AM32S_R_R_OFS_L:
Jne_f64_am32s_r_r_ofs(inst);
continue;
case JLT_I32_AM32S_R_R_OFS_L:
Jlt_i32_am32s_r_r_ofs(inst);
continue;
case JLT_I64_AM32S_R_R_OFS_L:
Jlt_i64_am32s_r_r_ofs(inst);
continue;
case JLT_F32_AM32S_R_R_OFS_L:
Jlt_f32_am32s_r_r_ofs(inst);
continue;
case JLT_F64_AM32S_R_R_OFS_L:
Jlt_f64_am32s_r_r_ofs(inst);
continue;
case JLE_I32_AM32S_R_R_OFS_L:
Jle_i32_am32s_r_r_ofs(inst);
continue;
case JLE_I64_AM32S_R_R_OFS_L:
Jle_i64_am32s_r_r_ofs(inst);
continue;
case JLE_F32_AM32S_R_R_OFS_L:
Jle_f32_am32s_r_r_ofs(inst);
continue;
case JLE_F64_AM32S_R_R_OFS_L:
Jle_f64_am32s_r_r_ofs(inst);
continue;
case JGT_I32_AM32S_R_R_OFS_L:
Jgt_i32_am32s_r_r_ofs(inst);
continue;
case JGT_I64_AM32S_R_R_OFS_L:
Jgt_i64_am32s_r_r_ofs(inst);
continue;
case JGT_F32_AM32S_R_R_OFS_L:
Jgt_f32_am32s_r_r_ofs(inst);
continue;
case JGT_F64_AM32S_R_R_OFS_L:
Jgt_f64_am32s_r_r_ofs(inst);
continue;
case JGE_I32_AM32S_R_R_OFS_L:
Jge_i32_am32s_r_r_ofs(inst);
continue;
case JGE_I64_AM32S_R_R_OFS_L:
Jge_i64_am32s_r_r_ofs(inst);
continue;
case JGE_F32_AM32S_R_R_OFS_L:
Jge_f32_am32s_r_r_ofs(inst);
continue;
case JGE_F64_AM32S_R_R_OFS_L:
Jge_f64_am32s_r_r_ofs(inst);
continue;
case JLT_U_I32_AM32S_R_R_OFS_L:
Jlt_u_i32_am32s_r_r_ofs(inst);
continue;
case JLT_U_I64_AM32S_R_R_OFS_L:
Jlt_u_i64_am32s_r_r_ofs(inst);
continue;
case JLE_U_I32_AM32S_R_R_OFS_L:
Jle_u_i32_am32s_r_r_ofs(inst);
continue;
case JLE_U_I64_AM32S_R_R_OFS_L:
Jle_u_i64_am32s_r_r_ofs(inst);
continue;
case JGT_U_I32_AM32S_R_R_OFS_L:
Jgt_u_i32_am32s_r_r_ofs(inst);
continue;
case JGT_U_I64_AM32S_R_R_OFS_L:
Jgt_u_i64_am32s_r_r_ofs(inst);
continue;
case JGE_U_I32_AM32S_R_R_OFS_L:
Jge_u_i32_am32s_r_r_ofs(inst);
continue;
case JGE_U_I64_AM32S_R_R_OFS_L:
Jge_u_i64_am32s_r_r_ofs(inst);
continue;
case JEQ_I32_AM64_R_R_OFS_L:
Jeq_i32_am64_r_r_ofs(inst);
continue;
case JEQ_I64_AM64_R_R_OFS_L:
Jeq_i64_am64_r_r_ofs(inst);
continue;
case JEQ_F32_AM64_R_R_OFS_L:
Jeq_f32_am64_r_r_ofs(inst);
continue;
case JEQ_F64_AM64_R_R_OFS_L:
Jeq_f64_am64_r_r_ofs(inst);
continue;
case JNE_I32_AM64_R_R_OFS_L:
Jne_i32_am64_r_r_ofs(inst);
continue;
case JNE_I64_AM64_R_R_OFS_L:
Jne_i64_am64_r_r_ofs(inst);
continue;
case JNE_F32_AM64_R_R_OFS_L:
Jne_f32_am64_r_r_ofs(inst);
continue;
case JNE_F64_AM64_R_R_OFS_L:
Jne_f64_am64_r_r_ofs(inst);
continue;
case JLT_I32_AM64_R_R_OFS_L:
Jlt_i32_am64_r_r_ofs(inst);
continue;
case JLT_I64_AM64_R_R_OFS_L:
Jlt_i64_am64_r_r_ofs(inst);
continue;
case JLT_F32_AM64_R_R_OFS_L:
Jlt_f32_am64_r_r_ofs(inst);
continue;
case JLT_F64_AM64_R_R_OFS_L:
Jlt_f64_am64_r_r_ofs(inst);
continue;
case JLE_I32_AM64_R_R_OFS_L:
Jle_i32_am64_r_r_ofs(inst);
continue;
case JLE_I64_AM64_R_R_OFS_L:
Jle_i64_am64_r_r_ofs(inst);
continue;
case JLE_F32_AM64_R_R_OFS_L:
Jle_f32_am64_r_r_ofs(inst);
continue;
case JLE_F64_AM64_R_R_OFS_L:
Jle_f64_am64_r_r_ofs(inst);
continue;
case JGT_I32_AM64_R_R_OFS_L:
Jgt_i32_am64_r_r_ofs(inst);
continue;
case JGT_I64_AM64_R_R_OFS_L:
Jgt_i64_am64_r_r_ofs(inst);
continue;
case JGT_F32_AM64_R_R_OFS_L:
Jgt_f32_am64_r_r_ofs(inst);
continue;
case JGT_F64_AM64_R_R_OFS_L:
Jgt_f64_am64_r_r_ofs(inst);
continue;
case JGE_I32_AM64_R_R_OFS_L:
Jge_i32_am64_r_r_ofs(inst);
continue;
case JGE_I64_AM64_R_R_OFS_L:
Jge_i64_am64_r_r_ofs(inst);
continue;
case JGE_F32_AM64_R_R_OFS_L:
Jge_f32_am64_r_r_ofs(inst);
continue;
case JGE_F64_AM64_R_R_OFS_L:
Jge_f64_am64_r_r_ofs(inst);
continue;
case JLT_U_I32_AM64_R_R_OFS_L:
Jlt_u_i32_am64_r_r_ofs(inst);
continue;
case JLT_U_I64_AM64_R_R_OFS_L:
Jlt_u_i64_am64_r_r_ofs(inst);
continue;
case JLE_U_I32_AM64_R_R_OFS_L:
Jle_u_i32_am64_r_r_ofs(inst);
continue;
case JLE_U_I64_AM64_R_R_OFS_L:
Jle_u_i64_am64_r_r_ofs(inst);
continue;
case JGT_U_I32_AM64_R_R_OFS_L:
Jgt_u_i32_am64_r_r_ofs(inst);
continue;
case JGT_U_I64_AM64_R_R_OFS_L:
Jgt_u_i64_am64_r_r_ofs(inst);
continue;
case JGE_U_I32_AM64_R_R_OFS_L:
Jge_u_i32_am64_r_r_ofs(inst);
continue;
case JGE_U_I64_AM64_R_R_OFS_L:
Jge_u_i64_am64_r_r_ofs(inst);
continue;
// <<<<<<<<<< manual case end <<<<<<<<<<
case NOP_AM32_L:
case NOP_AM321_L:
case NOP_AM322_L:
case NOP_AM323_L:
Nop_am32(inst);
break;
case UNREACH_AM32_L:
case UNREACH_AM321_L:
case UNREACH_AM322_L:
case UNREACH_AM323_L:
Unreach_am32(inst);
break;
case RETURN_AM32_L:
case RETURN_AM321_L:
case RETURN_AM322_L:
case RETURN_AM323_L:
Return_am32(inst);
break;
case MEMORYSIZE_AM32_R_L:
case MEMORYSIZE_AM32_R1_L:
case MEMORYSIZE_AM32_R2_L:
case MEMORYSIZE_AM32_R3_L:
Memorysize_am32_r(inst);
break;
case MEMORYGROW_AM32_R_R_L:
case MEMORYGROW_AM32_R_R1_L:
case MEMORYGROW_AM32_R_R2_L:
case MEMORYGROW_AM32_R_R3_L:
Memorygrow_am32_r_r(inst);
break;
case ADD_I32_AM32_R_IMM_L:
Add_i32_am32_r_imm(inst);
break;
case ADD_I64_AM32_R_IMM_L:
Add_i64_am32_r_imm(inst);
break;
case LLDA_I32_AM32_R_OFS_L:
Llda_i32_am32_r_ofs(inst);
break;
case LLDA_I64_AM32_R_OFS_L:
Llda_i64_am32_r_ofs(inst);
break;
case GLDA_I32_AM32_R_OFS_L:
Glda_i32_am32_r_ofs(inst);
break;
case GLDA_I64_AM32_R_OFS_L:
Glda_i64_am32_r_ofs(inst);
break;
case MOV_I32_AM32_R_R_L:
Mov_i32_am32_r_r(inst);
break;
case MOV_I64_AM32_R_R_L:
Mov_i64_am32_r_r(inst);
break;
case MOV_F32_AM32_R_R_L:
Mov_f32_am32_r_r(inst);
break;
case MOV_F64_AM32_R_R_L:
Mov_f64_am32_r_r(inst);
break;
case ADD_I32_AM32_R_R_L:
Add_i32_am32_r_r(inst);
break;
case ADD_I64_AM32_R_R_L:
Add_i64_am32_r_r(inst);
break;
case ADD_F32_AM32_R_R_L:
Add_f32_am32_r_r(inst);
break;
case ADD_F64_AM32_R_R_L:
Add_f64_am32_r_r(inst);
break;
case CONST_I32_AM32_R_IMM_L:
Const_i32_am32_r_imm(inst);
break;
case CONST_I64_AM32_R_IMM_L:
Const_i64_am32_r_imm(inst);
break;
case ADD_I32_AM32S_R_R_IMM_L:
Add_i32_am32s_r_r_imm(inst);
break;
case ADD_I64_AM32S_R_R_IMM_L:
Add_i64_am32s_r_r_imm(inst);
break;
case LOAD_I32_AM32S_R_R_IMM_L:
Load_i32_am32s_r_r_imm(inst);
break;
case LOAD_I64_AM32S_R_R_IMM_L:
Load_i64_am32s_r_r_imm(inst);
break;
case LOAD_F32_AM32S_R_R_IMM_L:
Load_f32_am32s_r_r_imm(inst);
break;
case LOAD_F64_AM32S_R_R_IMM_L:
Load_f64_am32s_r_r_imm(inst);
break;
case LOAD8_I32_AM32S_R_R_IMM_L:
Load8_i32_am32s_r_r_imm(inst);
break;
case LOAD8_I64_AM32S_R_R_IMM_L:
Load8_i64_am32s_r_r_imm(inst);
break;
case LOAD8_U_I32_AM32S_R_R_IMM_L:
Load8_u_i32_am32s_r_r_imm(inst);
break;
case LOAD8_U_I64_AM32S_R_R_IMM_L:
Load8_u_i64_am32s_r_r_imm(inst);
break;
case LOAD16_I32_AM32S_R_R_IMM_L:
Load16_i32_am32s_r_r_imm(inst);
break;
case LOAD16_I64_AM32S_R_R_IMM_L:
Load16_i64_am32s_r_r_imm(inst);
break;
case LOAD16_U_I32_AM32S_R_R_IMM_L:
Load16_u_i32_am32s_r_r_imm(inst);
break;
case LOAD16_U_I64_AM32S_R_R_IMM_L:
Load16_u_i64_am32s_r_r_imm(inst);
break;
case LOAD32_I64_AM32S_R_R_IMM_L:
Load32_i64_am32s_r_r_imm(inst);
break;
case LOAD32_U_I64_AM32S_R_R_IMM_L:
Load32_u_i64_am32s_r_r_imm(inst);
break;
case STORE_I32_AM32S_R_R_IMM_L:
Store_i32_am32s_r_r_imm(inst);
break;
case STORE_I64_AM32S_R_R_IMM_L:
Store_i64_am32s_r_r_imm(inst);
break;
case STORE_F32_AM32S_R_R_IMM_L:
Store_f32_am32s_r_r_imm(inst);
break;
case STORE_F64_AM32S_R_R_IMM_L:
Store_f64_am32s_r_r_imm(inst);
break;
case STORE8_I32_AM32S_R_R_IMM_L:
Store8_i32_am32s_r_r_imm(inst);
break;
case STORE8_I64_AM32S_R_R_IMM_L:
Store8_i64_am32s_r_r_imm(inst);
break;
case STORE16_I32_AM32S_R_R_IMM_L:
Store16_i32_am32s_r_r_imm(inst);
break;
case STORE16_I64_AM32S_R_R_IMM_L:
Store16_i64_am32s_r_r_imm(inst);
break;
case STORE32_I64_AM32S_R_R_IMM_L:
Store32_i64_am32s_r_r_imm(inst);
break;
case LLOAD_I32_AM32_R_IMM_L:
Lload_i32_am32_r_imm(inst);
break;
case LLOAD_I64_AM32_R_IMM_L:
Lload_i64_am32_r_imm(inst);
break;
case LLOAD_F32_AM32_R_IMM_L:
Lload_f32_am32_r_imm(inst);
break;
case LLOAD_F64_AM32_R_IMM_L:
Lload_f64_am32_r_imm(inst);
break;
case LLOAD8_I32_AM32_R_IMM_L:
Lload8_i32_am32_r_imm(inst);
break;
case LLOAD8_I64_AM32_R_IMM_L:
Lload8_i64_am32_r_imm(inst);
break;
case LLOAD8_U_I32_AM32_R_IMM_L:
Lload8_u_i32_am32_r_imm(inst);
break;
case LLOAD8_U_I64_AM32_R_IMM_L:
Lload8_u_i64_am32_r_imm(inst);
break;
case LLOAD16_I32_AM32_R_IMM_L:
Lload16_i32_am32_r_imm(inst);
break;
case LLOAD16_I64_AM32_R_IMM_L:
Lload16_i64_am32_r_imm(inst);
break;
case LLOAD16_U_I32_AM32_R_IMM_L:
Lload16_u_i32_am32_r_imm(inst);
break;
case LLOAD16_U_I64_AM32_R_IMM_L:
Lload16_u_i64_am32_r_imm(inst);
break;
case LLOAD32_I64_AM32_R_IMM_L:
Lload32_i64_am32_r_imm(inst);
break;
case LLOAD32_U_I64_AM32_R_IMM_L:
Lload32_u_i64_am32_r_imm(inst);
break;
case LSTORE_I32_AM32_R_IMM_L:
Lstore_i32_am32_r_imm(inst);
break;
case LSTORE_I64_AM32_R_IMM_L:
Lstore_i64_am32_r_imm(inst);
break;
case LSTORE_F32_AM32_R_IMM_L:
Lstore_f32_am32_r_imm(inst);
break;
case LSTORE_F64_AM32_R_IMM_L:
Lstore_f64_am32_r_imm(inst);
break;
case LSTORE8_I32_AM32_R_IMM_L:
Lstore8_i32_am32_r_imm(inst);
break;
case LSTORE8_I64_AM32_R_IMM_L:
Lstore8_i64_am32_r_imm(inst);
break;
case LSTORE16_I32_AM32_R_IMM_L:
Lstore16_i32_am32_r_imm(inst);
break;
case LSTORE16_I64_AM32_R_IMM_L:
Lstore16_i64_am32_r_imm(inst);
break;
case LSTORE32_I64_AM32_R_IMM_L:
Lstore32_i64_am32_r_imm(inst);
break;
case ADD_I32_AM32S_R_R_R_L:
Add_i32_am32s_r_r_r(inst);
break;
case ADD_I64_AM32S_R_R_R_L:
Add_i64_am32s_r_r_r(inst);
break;
case ADD_F32_AM32S_R_R_R_L:
Add_f32_am32s_r_r_r(inst);
break;
case ADD_F64_AM32S_R_R_R_L:
Add_f64_am32s_r_r_r(inst);
break;
case SUB_I32_AM32S_R_R_R_L:
Sub_i32_am32s_r_r_r(inst);
break;
case SUB_I64_AM32S_R_R_R_L:
Sub_i64_am32s_r_r_r(inst);
break;
case SUB_F32_AM32S_R_R_R_L:
Sub_f32_am32s_r_r_r(inst);
break;
case SUB_F64_AM32S_R_R_R_L:
Sub_f64_am32s_r_r_r(inst);
break;
case ROTL_I32_AM32S_R_R_R_L:
Rotl_i32_am32s_r_r_r(inst);
break;
case ROTL_I64_AM32S_R_R_R_L:
Rotl_i64_am32s_r_r_r(inst);
break;
case ROTR_I32_AM32S_R_R_R_L:
Rotr_i32_am32s_r_r_r(inst);
break;
case ROTR_I64_AM32S_R_R_R_L:
Rotr_i64_am32s_r_r_r(inst);
break;
case CONV_I32_I64_AM32_R_R_L:
Conv_i32_i64_am32_r_r(inst);
break;
case CONV_I32_F32_AM32_R_R_L:
Conv_i32_f32_am32_r_r(inst);
break;
case CONV_I32_F64_AM32_R_R_L:
Conv_i32_f64_am32_r_r(inst);
break;
case CONV_I32_U_I64_AM32_R_R_L:
Conv_i32_u_i64_am32_r_r(inst);
break;
case CONV_I64_I32_AM32_R_R_L:
Conv_i64_i32_am32_r_r(inst);
break;
case CONV_I64_F32_AM32_R_R_L:
Conv_i64_f32_am32_r_r(inst);
break;
case CONV_I64_F64_AM32_R_R_L:
Conv_i64_f64_am32_r_r(inst);
break;
case CONV_F32_I32_AM32_R_R_L:
Conv_f32_i32_am32_r_r(inst);
break;
case CONV_F32_I64_AM32_R_R_L:
Conv_f32_i64_am32_r_r(inst);
break;
case CONV_F32_F64_AM32_R_R_L:
Conv_f32_f64_am32_r_r(inst);
break;
case CONV_F64_I32_AM32_R_R_L:
Conv_f64_i32_am32_r_r(inst);
break;
case CONV_F64_I64_AM32_R_R_L:
Conv_f64_i64_am32_r_r(inst);
break;
case CONV_F64_F32_AM32_R_R_L:
Conv_f64_f32_am32_r_r(inst);
break;
case EQZ_I32_AM32_R_R_L:
Eqz_i32_am32_r_r(inst);
break;
case EQZ_I64_AM32_R_R_L:
Eqz_i64_am32_r_r(inst);
break;
case EQZ_F32_AM32_R_R_L:
Eqz_f32_am32_r_r(inst);
break;
case EQZ_F64_AM32_R_R_L:
Eqz_f64_am32_r_r(inst);
break;
case CEIL_F32_AM32_R_R_L:
Ceil_f32_am32_r_r(inst);
break;
case CEIL_F64_AM32_R_R_L:
Ceil_f64_am32_r_r(inst);
break;
case FLOOR_F32_AM32_R_R_L:
Floor_f32_am32_r_r(inst);
break;
case FLOOR_F64_AM32_R_R_L:
Floor_f64_am32_r_r(inst);
break;
case SQRT_F32_AM32_R_R_L:
Sqrt_f32_am32_r_r(inst);
break;
case SQRT_F64_AM32_R_R_L:
Sqrt_f64_am32_r_r(inst);
break;
case NEG_F32_AM32_R_R_L:
Neg_f32_am32_r_r(inst);
break;
case NEG_F64_AM32_R_R_L:
Neg_f64_am32_r_r(inst);
break;
case REINTR_F32_I32_AM32_R_R_L:
Reintr_f32_i32_am32_r_r(inst);
break;
case REINTR_F64_I64_AM32_R_R_L:
Reintr_f64_i64_am32_r_r(inst);
break;
case REINTR_I32_F32_AM32_R_R_L:
Reintr_i32_f32_am32_r_r(inst);
break;
case REINTR_I64_F64_AM32_R_R_L:
Reintr_i64_f64_am32_r_r(inst);
break;
case CONST_L_I32_AM64_R_IMM_L:
Const_l_i32_am64_r_imm(inst);
break;
case CONST_L_I64_AM64_R_IMM_L:
Const_l_i64_am64_r_imm(inst);
break;
case CONST_L_F32_AM64_R_IMM_L:
Const_l_f32_am64_r_imm(inst);
break;
case CONST_L_F64_AM64_R_IMM_L:
Const_l_f64_am64_r_imm(inst);
break;
case CONST_L_HIGH_I64_AM64_R_IMM_L:
Const_l_high_i64_am64_r_imm(inst);
break;
case CONST_L_HIGH_F64_AM64_R_IMM_L:
Const_l_high_f64_am64_r_imm(inst);
break;
case CTZ_I32_AM64_R_OFS_L:
Ctz_i32_am64_r_ofs(inst);
break;
case CTZ_I64_AM64_R_OFS_L:
Ctz_i64_am64_r_ofs(inst);
break;
case POPCNT_I32_AM64_R_OFS_L:
Popcnt_i32_am64_r_ofs(inst);
break;
case POPCNT_I64_AM64_R_OFS_L:
Popcnt_i64_am64_r_ofs(inst);
break;
case ADD_I32_AM64_R_R_IMM_L:
Add_i32_am64_r_r_imm(inst);
break;
case ADD_I64_AM64_R_R_IMM_L:
Add_i64_am64_r_r_imm(inst);
break;
case LOAD_I32_AM64_R_R_IMM_L:
Load_i32_am64_r_r_imm(inst);
break;
case LOAD_I64_AM64_R_R_IMM_L:
Load_i64_am64_r_r_imm(inst);
break;
case LOAD_F32_AM64_R_R_IMM_L:
Load_f32_am64_r_r_imm(inst);
break;
case LOAD_F64_AM64_R_R_IMM_L:
Load_f64_am64_r_r_imm(inst);
break;
case LOAD8_I32_AM64_R_R_IMM_L:
Load8_i32_am64_r_r_imm(inst);
break;
case LOAD8_I64_AM64_R_R_IMM_L:
Load8_i64_am64_r_r_imm(inst);
break;
case LOAD8_U_I32_AM64_R_R_IMM_L:
Load8_u_i32_am64_r_r_imm(inst);
break;
case LOAD8_U_I64_AM64_R_R_IMM_L:
Load8_u_i64_am64_r_r_imm(inst);
break;
case LOAD16_I32_AM64_R_R_IMM_L:
Load16_i32_am64_r_r_imm(inst);
break;
case LOAD16_I64_AM64_R_R_IMM_L:
Load16_i64_am64_r_r_imm(inst);
break;
case LOAD16_U_I32_AM64_R_R_IMM_L:
Load16_u_i32_am64_r_r_imm(inst);
break;
case LOAD16_U_I64_AM64_R_R_IMM_L:
Load16_u_i64_am64_r_r_imm(inst);
break;
case LOAD32_I64_AM64_R_R_IMM_L:
Load32_i64_am64_r_r_imm(inst);
break;
case LOAD32_U_I64_AM64_R_R_IMM_L:
Load32_u_i64_am64_r_r_imm(inst);
break;
case STORE_I32_AM64_R_R_IMM_L:
Store_i32_am64_r_r_imm(inst);
break;
case STORE_I64_AM64_R_R_IMM_L:
Store_i64_am64_r_r_imm(inst);
break;
case STORE_F32_AM64_R_R_IMM_L:
Store_f32_am64_r_r_imm(inst);
break;
case STORE_F64_AM64_R_R_IMM_L:
Store_f64_am64_r_r_imm(inst);
break;
case STORE8_I32_AM64_R_R_IMM_L:
Store8_i32_am64_r_r_imm(inst);
break;
case STORE8_I64_AM64_R_R_IMM_L:
Store8_i64_am64_r_r_imm(inst);
break;
case STORE16_I32_AM64_R_R_IMM_L:
Store16_i32_am64_r_r_imm(inst);
break;
case STORE16_I64_AM64_R_R_IMM_L:
Store16_i64_am64_r_r_imm(inst);
break;
case STORE32_I64_AM64_R_R_IMM_L:
Store32_i64_am64_r_r_imm(inst);
break;
case SELECT_I32_AM64_R_R_OFS_L:
Select_i32_am64_r_r_ofs(inst);
break;
case SELECT_I64_AM64_R_R_OFS_L:
Select_i64_am64_r_r_ofs(inst);
break;
case SELECT_F32_AM64_R_R_OFS_L:
Select_f32_am64_r_r_ofs(inst);
break;
case SELECT_F64_AM64_R_R_OFS_L:
Select_f64_am64_r_r_ofs(inst);
break;
case LLOAD_I32_AM64_R_IMM_L:
Lload_i32_am64_r_imm(inst);
break;
case LLOAD_I64_AM64_R_IMM_L:
Lload_i64_am64_r_imm(inst);
break;
case LLOAD_F32_AM64_R_IMM_L:
Lload_f32_am64_r_imm(inst);
break;
case LLOAD_F64_AM64_R_IMM_L:
Lload_f64_am64_r_imm(inst);
break;
case LLOAD8_I32_AM64_R_IMM_L:
Lload8_i32_am64_r_imm(inst);
break;
case LLOAD8_I64_AM64_R_IMM_L:
Lload8_i64_am64_r_imm(inst);
break;
case LLOAD8_U_I32_AM64_R_IMM_L:
Lload8_u_i32_am64_r_imm(inst);
break;
case LLOAD8_U_I64_AM64_R_IMM_L:
Lload8_u_i64_am64_r_imm(inst);
break;
case LLOAD16_I32_AM64_R_IMM_L:
Lload16_i32_am64_r_imm(inst);
break;
case LLOAD16_I64_AM64_R_IMM_L:
Lload16_i64_am64_r_imm(inst);
break;
case LLOAD16_U_I32_AM64_R_IMM_L:
Lload16_u_i32_am64_r_imm(inst);
break;
case LLOAD16_U_I64_AM64_R_IMM_L:
Lload16_u_i64_am64_r_imm(inst);
break;
case LLOAD32_I64_AM64_R_IMM_L:
Lload32_i64_am64_r_imm(inst);
break;
case LLOAD32_U_I64_AM64_R_IMM_L:
Lload32_u_i64_am64_r_imm(inst);
break;
case LSTORE_I32_AM64_R_IMM_L:
Lstore_i32_am64_r_imm(inst);
break;
case LSTORE_I64_AM64_R_IMM_L:
Lstore_i64_am64_r_imm(inst);
break;
case LSTORE_F32_AM64_R_IMM_L:
Lstore_f32_am64_r_imm(inst);
break;
case LSTORE_F64_AM64_R_IMM_L:
Lstore_f64_am64_r_imm(inst);
break;
case LSTORE8_I32_AM64_R_IMM_L:
Lstore8_i32_am64_r_imm(inst);
break;
case LSTORE8_I64_AM64_R_IMM_L:
Lstore8_i64_am64_r_imm(inst);
break;
case LSTORE16_I32_AM64_R_IMM_L:
Lstore16_i32_am64_r_imm(inst);
break;
case LSTORE16_I64_AM64_R_IMM_L:
Lstore16_i64_am64_r_imm(inst);
break;
case LSTORE32_I64_AM64_R_IMM_L:
Lstore32_i64_am64_r_imm(inst);
break;
case EQ_I32_AM64_R_R_R_L:
Eq_i32_am64_r_r_r(inst);
break;
case EQ_I64_AM64_R_R_R_L:
Eq_i64_am64_r_r_r(inst);
break;
case EQ_F32_AM64_R_R_R_L:
Eq_f32_am64_r_r_r(inst);
break;
case EQ_F64_AM64_R_R_R_L:
Eq_f64_am64_r_r_r(inst);
break;
case NE_I32_AM64_R_R_R_L:
Ne_i32_am64_r_r_r(inst);
break;
case NE_I64_AM64_R_R_R_L:
Ne_i64_am64_r_r_r(inst);
break;
case NE_F32_AM64_R_R_R_L:
Ne_f32_am64_r_r_r(inst);
break;
case NE_F64_AM64_R_R_R_L:
Ne_f64_am64_r_r_r(inst);
break;
case LT_I32_AM64_R_R_R_L:
Lt_i32_am64_r_r_r(inst);
break;
case LT_I64_AM64_R_R_R_L:
Lt_i64_am64_r_r_r(inst);
break;
case LT_F32_AM64_R_R_R_L:
Lt_f32_am64_r_r_r(inst);
break;
case LT_F64_AM64_R_R_R_L:
Lt_f64_am64_r_r_r(inst);
break;
case LT_U_I32_AM64_R_R_R_L:
Lt_u_i32_am64_r_r_r(inst);
break;
case LT_U_I64_AM64_R_R_R_L:
Lt_u_i64_am64_r_r_r(inst);
break;
case GT_I32_AM64_R_R_R_L:
Gt_i32_am64_r_r_r(inst);
break;
case GT_I64_AM64_R_R_R_L:
Gt_i64_am64_r_r_r(inst);
break;
case GT_F32_AM64_R_R_R_L:
Gt_f32_am64_r_r_r(inst);
break;
case GT_F64_AM64_R_R_R_L:
Gt_f64_am64_r_r_r(inst);
break;
case GT_U_I32_AM64_R_R_R_L:
Gt_u_i32_am64_r_r_r(inst);
break;
case GT_U_I64_AM64_R_R_R_L:
Gt_u_i64_am64_r_r_r(inst);
break;
case LE_I32_AM64_R_R_R_L:
Le_i32_am64_r_r_r(inst);
break;
case LE_I64_AM64_R_R_R_L:
Le_i64_am64_r_r_r(inst);
break;
case LE_F32_AM64_R_R_R_L:
Le_f32_am64_r_r_r(inst);
break;
case LE_F64_AM64_R_R_R_L:
Le_f64_am64_r_r_r(inst);
break;
case LE_U_I32_AM64_R_R_R_L:
Le_u_i32_am64_r_r_r(inst);
break;
case LE_U_I64_AM64_R_R_R_L:
Le_u_i64_am64_r_r_r(inst);
break;
case GE_I32_AM64_R_R_R_L:
Ge_i32_am64_r_r_r(inst);
break;
case GE_I64_AM64_R_R_R_L:
Ge_i64_am64_r_r_r(inst);
break;
case GE_F32_AM64_R_R_R_L:
Ge_f32_am64_r_r_r(inst);
break;
case GE_F64_AM64_R_R_R_L:
Ge_f64_am64_r_r_r(inst);
break;
case GE_U_I32_AM64_R_R_R_L:
Ge_u_i32_am64_r_r_r(inst);
break;
case GE_U_I64_AM64_R_R_R_L:
Ge_u_i64_am64_r_r_r(inst);
break;
case ADD_I32_AM64_R_R_R_L:
Add_i32_am64_r_r_r(inst);
break;
case ADD_I64_AM64_R_R_R_L:
Add_i64_am64_r_r_r(inst);
break;
case ADD_F32_AM64_R_R_R_L:
Add_f32_am64_r_r_r(inst);
break;
case ADD_F64_AM64_R_R_R_L:
Add_f64_am64_r_r_r(inst);
break;
case SUB_I32_AM64_R_R_R_L:
Sub_i32_am64_r_r_r(inst);
break;
case SUB_I64_AM64_R_R_R_L:
Sub_i64_am64_r_r_r(inst);
break;
case SUB_F32_AM64_R_R_R_L:
Sub_f32_am64_r_r_r(inst);
break;
case SUB_F64_AM64_R_R_R_L:
Sub_f64_am64_r_r_r(inst);
break;
case MUL_I32_AM64_R_R_R_L:
Mul_i32_am64_r_r_r(inst);
break;
case MUL_I64_AM64_R_R_R_L:
Mul_i64_am64_r_r_r(inst);
break;
case MUL_F32_AM64_R_R_R_L:
Mul_f32_am64_r_r_r(inst);
break;
case MUL_F64_AM64_R_R_R_L:
Mul_f64_am64_r_r_r(inst);
break;
case DIV_I32_AM64_R_R_R_L:
Div_i32_am64_r_r_r(inst);
break;
case DIV_I64_AM64_R_R_R_L:
Div_i64_am64_r_r_r(inst);
break;
case DIV_F32_AM64_R_R_R_L:
Div_f32_am64_r_r_r(inst);
break;
case DIV_F64_AM64_R_R_R_L:
Div_f64_am64_r_r_r(inst);
break;
case DIV_U_I32_AM64_R_R_R_L:
Div_u_i32_am64_r_r_r(inst);
break;
case DIV_U_I64_AM64_R_R_R_L:
Div_u_i64_am64_r_r_r(inst);
break;
case REM_I32_AM64_R_R_R_L:
Rem_i32_am64_r_r_r(inst);
break;
case REM_I64_AM64_R_R_R_L:
Rem_i64_am64_r_r_r(inst);
break;
case REM_U_I32_AM64_R_R_R_L:
Rem_u_i32_am64_r_r_r(inst);
break;
case REM_U_I64_AM64_R_R_R_L:
Rem_u_i64_am64_r_r_r(inst);
break;
case AND_I32_AM64_R_R_R_L:
And_i32_am64_r_r_r(inst);
break;
case AND_I64_AM64_R_R_R_L:
And_i64_am64_r_r_r(inst);
break;
case OR_I32_AM64_R_R_R_L:
Or_i32_am64_r_r_r(inst);
break;
case OR_I64_AM64_R_R_R_L:
Or_i64_am64_r_r_r(inst);
break;
case XOR_I32_AM64_R_R_R_L:
Xor_i32_am64_r_r_r(inst);
break;
case XOR_I64_AM64_R_R_R_L:
Xor_i64_am64_r_r_r(inst);
break;
case SHL_I32_AM64_R_R_R_L:
Shl_i32_am64_r_r_r(inst);
break;
case SHL_I64_AM64_R_R_R_L:
Shl_i64_am64_r_r_r(inst);
break;
case SHR_I32_AM64_R_R_R_L:
Shr_i32_am64_r_r_r(inst);
break;
case SHR_I64_AM64_R_R_R_L:
Shr_i64_am64_r_r_r(inst);
break;
case SHR_U_I32_AM64_R_R_R_L:
Shr_u_i32_am64_r_r_r(inst);
break;
case SHR_U_I64_AM64_R_R_R_L:
Shr_u_i64_am64_r_r_r(inst);
break;
case MIN_F32_AM64_R_R_R_L:
Min_f32_am64_r_r_r(inst);
break;
case MIN_F64_AM64_R_R_R_L:
Min_f64_am64_r_r_r(inst);
break;
case MAX_F32_AM64_R_R_R_L:
Max_f32_am64_r_r_r(inst);
break;
case MAX_F64_AM64_R_R_R_L:
Max_f64_am64_r_r_r(inst);
break;
case LLDA_I32_AM64_R_OFS_L:
Llda_i32_am64_r_ofs(inst);
break;
case LLDA_I64_AM64_R_OFS_L:
Llda_i64_am64_r_ofs(inst);
break;
case BUILTIN_I32_AM64_R_R_IMM_L:
Builtin_i32_am64_r_r_imm(inst);
break;
case BUILTIN_I64_AM64_R_R_IMM_L:
Builtin_i64_am64_r_r_imm(inst);
break;
case BUILTIN_F32_AM64_R_R_IMM_L:
Builtin_f32_am64_r_r_imm(inst);
break;
case BUILTIN_F64_AM64_R_R_IMM_L:
Builtin_f64_am64_r_r_imm(inst);
break;
case GLOBALGET_I32_AM64_R_OFS_L:
Globalget_i32_am64_r_ofs(inst);
break;
case GLOBALGET_I64_AM64_R_OFS_L:
Globalget_i64_am64_r_ofs(inst);
break;
case GLOBALGET_F32_AM64_R_OFS_L:
Globalget_f32_am64_r_ofs(inst);
break;
case GLOBALGET_F64_AM64_R_OFS_L:
Globalget_f64_am64_r_ofs(inst);
break;
case GLOBALSET_I32_AM64_R_OFS_L:
Globalset_i32_am64_r_ofs(inst);
break;
case GLOBALSET_I64_AM64_R_OFS_L:
Globalset_i64_am64_r_ofs(inst);
break;
case GLOBALSET_F32_AM64_R_OFS_L:
Globalset_f32_am64_r_ofs(inst);
break;
case GLOBALSET_F64_AM64_R_OFS_L:
Globalset_f64_am64_r_ofs(inst);
break;
default:
Is_True(false, ("opcode_l uimpl: 0x%x", inst->Get_opcode_l()));